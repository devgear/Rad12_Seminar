// This unit is autogenerated. Do not edit it manually.
// Source: JSON entered in editor
// Date: 2023-11-15 ?¤í›„ 2:05:43

unit Unit3;

interface

uses
  System.Classes, System.JSON.Serializers, System.JSON;

type
  [JsonSerialize(TJsonMemberSerialization.Fields)]
  TAdd = class(TPersistent)
  private
    [JsonName('City')]
    FCity: string;
    [JsonName('PNo')]
    FPNo: Integer;
    [JsonName('Detail')]
    FDetail: string;
  public
    property City: string read FCity write FCity;
    property PNo: Integer read FPNo write FPNo;
    property Detail: string read FDetail write FDetail;
  end;

  [JsonSerialize(TJsonMemberSerialization.Fields)]
  TPerson = class(TPersistent)
  private
    [JsonName('ID')]
    FID: string;
    [JsonName('Hp')]
    FHp: string;
    [JsonName('Add')]
    FAdd: TAdd;
  public
    constructor Create;
    destructor Destroy; override;
    property ID: string read FID write FID;
    property Hp: string read FHp write FHp;
    property Add: TAdd read FAdd;
  end;

  [JsonSerialize(TJsonMemberSerialization.Fields)]
  TDept = class(TPersistent)
  private
    [JsonName('Did')]
    FDid: string;
    [JsonName('DName')]
    FDName: string;
  public
    property Did: string read FDid write FDid;
    property DName: string read FDName write FDName;
  end;

  [JsonSerialize(TJsonMemberSerialization.Fields)]
  MyPerson = class(TPersistent)
  private
    [JsonName('person')]
    Fperson: TPerson;
    [JsonName('Dept')]
    FDept: TDept;
  public
    constructor Create;
    destructor Destroy; override;
    class function FromJSON(const AValue: TJSONValue): MyPerson; overload; static;
    class function FromJSON(const AValue: string): MyPerson; overload; static;
    function ToJSONObject: TJSONValue;
    function ToJSONString: string;
    property person: TPerson read Fperson;
    property Dept: TDept read FDept;
  end;

  [JsonSerialize(TJsonMemberSerialization.Fields)]
  PArray = class(TPersistent)
  private
    [JsonName('Dataset')]
    FDataset: TArray<MyPerson>;
  public
    destructor Destroy; override;
    class function FromJSON(const AValue: TJSONArray): PArray; overload; static;
    class function FromJSON(const AValue: string): PArray; overload; static;
    function ToJSONArray: TJSONArray;
    function ToJSONString: string;
    property Dataset: TArray<MyPerson> read FDataset write FDataset;
  end;

implementation

uses
  System.Generics.Collections, System.SysUtils;

constructor TPerson.Create;
begin
  inherited Create;
  FAdd := TAdd.Create;
end;

destructor TPerson.Destroy;
begin
  FreeAndNil(FAdd);
  inherited Destroy;
end;

constructor MyPerson.Create;
begin
  inherited Create;
  Fperson := TPerson.Create;
  FDept := TDept.Create;
end;

destructor MyPerson.Destroy;
begin
  FreeAndNil(Fperson);
  FreeAndNil(FDept);
  inherited Destroy;
end;

class function MyPerson.FromJSON(const AValue: TJSONValue): MyPerson;
begin
  Result := TJSONMapper<MyPerson>.Default.FromObject(AValue);
end;

class function MyPerson.FromJSON(const AValue: string): MyPerson;
begin
  Result := TJSONMapper<MyPerson>.Default.FromObject(AValue);
end;

function MyPerson.ToJSONObject: TJSONValue;
begin
  Result := TJSONMapper<MyPerson>.Default.ToObject(Self);
end;

function MyPerson.ToJSONString: string;
begin
  Result := TJSONMapper<MyPerson>.Default.ToString(Self);
end;

destructor PArray.Destroy;
begin
  TArray.FreeValues<MyPerson>(FDataset);
  inherited Destroy;
end;

class function PArray.FromJSON(const AValue: TJSONArray): PArray;
begin
  var LArr := TJSONMapper<MyPerson>.Default.FromArray(AValue);
  Result := PArray.Create;
  Result.Dataset := LArr;
end;

class function PArray.FromJSON(const AValue: string): PArray;
begin
  var LArr := TJSONMapper<MyPerson>.Default.FromArray(AValue);
  Result := PArray.Create;
  Result.Dataset := LArr;
end;

function PArray.ToJSONArray: TJSONArray;
begin
  Result := TJSONMapper<MyPerson>.Default.ToArray(Dataset);
end;

function PArray.ToJSONString: string;
begin
  Result := TJSONMapper<MyPerson>.Default.ToString(Dataset);
end;

initialization

  RegisterClass(TAdd);
  RegisterClass(TPerson);
  RegisterClass(TDept);
  RegisterClass(MyPerson);
  RegisterClass(PArray);

end.
